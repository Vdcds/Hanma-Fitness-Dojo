// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  imageUrl         String?
  age              Int?
  gender           String?
  weight           Float?
  fitnessLevel     fitnessLevel    @default(FAT)
  intensityLevel   Intensity?      @default(MEDIUM)
  dietPreference   String?
  height           Float?
  region           Region?         @default(INDIAN)
  fitnessGoal      String?         @default("Overall Fitness")
  equipmentAccess  EquipmentAccess @default(Both)
  healthConditions String?         @default("Healthy")
  frequency        String?         @default("3 Days a week")
  ExerciseType     ExerciseType    @default(Mixed)
  role             UserRole        @default(USER)
  createdAt        DateTime        @default(now()) @map(name: "created_at")
  updatedAt        DateTime        @updatedAt @map(name: "updated_at")
  workoutPlan      WorkoutPlan[]
  dietPlans        DietPlan[]
  aiWorkout        String? // AI generated workout but temporary need to change
  aiDiet           String? // AI generated diet but temporary need to change 
  flagfilled       Boolean?        @default(false)

  @@map(name: "users")
}

enum UserRole {
  USER
  TRAINER
  ADMIN
}

enum fitnessLevel {
  SKINNY
  FIT
  FAT
  OBESE
}

enum EquipmentAccess {
  Gym
  HomeEquipment
  Both
  Neither
}

enum Region {
  INDIAN
  AMERICAN
  CHINESE
  ITALIAN
  MEXICAN
  CONTINENTAL
  OTHER
}

enum ExerciseType {
  Cardio
  StrengthTraining
  HIIT
  Yoga
  Mixed
  MuscleBuilding
}

enum MuscleGroup {
  CHEST
  BACK
  LEGS
  ARMS
  SHOULDERS
  CORE
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum Intensity {
  LOW
  MEDIUM
  HIGH
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model WorkoutPlan {
  id         String     @id @default(cuid())
  title      String
  difficulty Difficulty
  users      User[]
  workouts   Workout[]

  @@map(name: "workout_plans")
}

model Workout {
  id            String        @id @default(cuid())
  title         String
  description   String?
  videoUrl      String?
  imageUrl      String?
  difficulty    Difficulty
  muscleGroup   MuscleGroup[]
  duration      Int?
  intensity     Intensity?
  WorkoutPlan   WorkoutPlan?  @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId String?

  @@map(name: "workouts")
}

model DietPlan {
  id          String  @id @default(cuid())
  title       String
  description String?
  Meal        Meal[]
  users       User[]

  @@map(name: "diet_plans")
}

model Meal {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  mealType    MealType
  recipe      String?

  DietPlan   DietPlan? @relation(fields: [dietPlanId], references: [id])
  dietPlanId String?

  @@map(name: "meals")
}
